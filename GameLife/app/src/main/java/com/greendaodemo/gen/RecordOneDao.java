package com.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ftd.txf.com.gamelife.entity.RecordOne;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_ONE".
*/
public class RecordOneDao extends AbstractDao<RecordOne, Long> {

    public static final String TABLENAME = "RECORD_ONE";

    /**
     * Properties of entity RecordOne.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property One_id = new Property(0, Long.class, "one_id", true, "_id");
        public final static Property Recordone_id = new Property(1, Long.class, "recordone_id", false, "RECORDONE_ID");
        public final static Property Creatime = new Property(2, String.class, "creatime", false, "CREATIME");
        public final static Property Finishtime = new Property(3, String.class, "finishtime", false, "FINISHTIME");
        public final static Property Last_time = new Property(4, int.class, "last_time", false, "LAST_TIME");
        public final static Property Work_name = new Property(5, String.class, "work_name", false, "WORK_NAME");
        public final static Property Time = new Property(6, int.class, "time", false, "TIME");
        public final static Property Gold = new Property(7, int.class, "gold", false, "GOLD");
        public final static Property Exp = new Property(8, int.class, "exp", false, "EXP");
    }


    public RecordOneDao(DaoConfig config) {
        super(config);
    }
    
    public RecordOneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_ONE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: one_id
                "\"RECORDONE_ID\" INTEGER," + // 1: recordone_id
                "\"CREATIME\" TEXT," + // 2: creatime
                "\"FINISHTIME\" TEXT," + // 3: finishtime
                "\"LAST_TIME\" INTEGER NOT NULL ," + // 4: last_time
                "\"WORK_NAME\" TEXT," + // 5: work_name
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"GOLD\" INTEGER NOT NULL ," + // 7: gold
                "\"EXP\" INTEGER NOT NULL );"); // 8: exp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_ONE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordOne entity) {
        stmt.clearBindings();
 
        Long one_id = entity.getOne_id();
        if (one_id != null) {
            stmt.bindLong(1, one_id);
        }
 
        Long recordone_id = entity.getRecordone_id();
        if (recordone_id != null) {
            stmt.bindLong(2, recordone_id);
        }
 
        String creatime = entity.getCreatime();
        if (creatime != null) {
            stmt.bindString(3, creatime);
        }
 
        String finishtime = entity.getFinishtime();
        if (finishtime != null) {
            stmt.bindString(4, finishtime);
        }
        stmt.bindLong(5, entity.getLast_time());
 
        String work_name = entity.getWork_name();
        if (work_name != null) {
            stmt.bindString(6, work_name);
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindLong(8, entity.getGold());
        stmt.bindLong(9, entity.getExp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordOne entity) {
        stmt.clearBindings();
 
        Long one_id = entity.getOne_id();
        if (one_id != null) {
            stmt.bindLong(1, one_id);
        }
 
        Long recordone_id = entity.getRecordone_id();
        if (recordone_id != null) {
            stmt.bindLong(2, recordone_id);
        }
 
        String creatime = entity.getCreatime();
        if (creatime != null) {
            stmt.bindString(3, creatime);
        }
 
        String finishtime = entity.getFinishtime();
        if (finishtime != null) {
            stmt.bindString(4, finishtime);
        }
        stmt.bindLong(5, entity.getLast_time());
 
        String work_name = entity.getWork_name();
        if (work_name != null) {
            stmt.bindString(6, work_name);
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindLong(8, entity.getGold());
        stmt.bindLong(9, entity.getExp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordOne readEntity(Cursor cursor, int offset) {
        RecordOne entity = new RecordOne( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // one_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // recordone_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creatime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // finishtime
            cursor.getInt(offset + 4), // last_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // work_name
            cursor.getInt(offset + 6), // time
            cursor.getInt(offset + 7), // gold
            cursor.getInt(offset + 8) // exp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordOne entity, int offset) {
        entity.setOne_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordone_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreatime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFinishtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLast_time(cursor.getInt(offset + 4));
        entity.setWork_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.getInt(offset + 6));
        entity.setGold(cursor.getInt(offset + 7));
        entity.setExp(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordOne entity, long rowId) {
        entity.setOne_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordOne entity) {
        if(entity != null) {
            return entity.getOne_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordOne entity) {
        return entity.getOne_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
