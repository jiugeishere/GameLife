package com.greendaodemo.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ftd.txf.com.gamelife.entity.PersonValue;

import ftd.txf.com.gamelife.entity.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Person_id = new Property(0, Long.class, "person_id", true, "_id");
        public final static Property Person_name = new Property(1, String.class, "person_name", false, "PERSON_NAME");
        public final static Property Person_img = new Property(2, int.class, "person_img", false, "PERSON_IMG");
        public final static Property Createtime = new Property(3, int.class, "createtime", false, "CREATETIME");
        public final static Property Big_ID = new Property(4, int.class, "Big_ID", false, "BIG__ID");
        public final static Property Mubiao = new Property(5, String.class, "mubiao", false, "MUBIAO");
        public final static Property Hardrank = new Property(6, int.class, "hardrank", false, "HARDRANK");
        public final static Property Person_sex = new Property(7, int.class, "person_sex", false, "PERSON_SEX");
        public final static Property Person_geyan = new Property(8, String.class, "person_geyan", false, "PERSON_GEYAN");
        public final static Property Persongif = new Property(9, int.class, "persongif", false, "PERSONGIF");
        public final static Property Congwugif = new Property(10, int.class, "congwugif", false, "CONGWUGIF");
        public final static Property Personvalue_id = new Property(11, Long.class, "personvalue_id", false, "PERSONVALUE_ID");
    }

    private DaoSession daoSession;


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: person_id
                "\"PERSON_NAME\" TEXT," + // 1: person_name
                "\"PERSON_IMG\" INTEGER NOT NULL ," + // 2: person_img
                "\"CREATETIME\" INTEGER NOT NULL ," + // 3: createtime
                "\"BIG__ID\" INTEGER NOT NULL ," + // 4: Big_ID
                "\"MUBIAO\" TEXT," + // 5: mubiao
                "\"HARDRANK\" INTEGER NOT NULL ," + // 6: hardrank
                "\"PERSON_SEX\" INTEGER NOT NULL ," + // 7: person_sex
                "\"PERSON_GEYAN\" TEXT," + // 8: person_geyan
                "\"PERSONGIF\" INTEGER NOT NULL ," + // 9: persongif
                "\"CONGWUGIF\" INTEGER NOT NULL ," + // 10: congwugif
                "\"PERSONVALUE_ID\" INTEGER);"); // 11: personvalue_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(1, person_id);
        }
 
        String person_name = entity.getPerson_name();
        if (person_name != null) {
            stmt.bindString(2, person_name);
        }
        stmt.bindLong(3, entity.getPerson_img());
        stmt.bindLong(4, entity.getCreatetime());
        stmt.bindLong(5, entity.getBig_ID());
 
        String mubiao = entity.getMubiao();
        if (mubiao != null) {
            stmt.bindString(6, mubiao);
        }
        stmt.bindLong(7, entity.getHardrank());
        stmt.bindLong(8, entity.getPerson_sex());
 
        String person_geyan = entity.getPerson_geyan();
        if (person_geyan != null) {
            stmt.bindString(9, person_geyan);
        }
        stmt.bindLong(10, entity.getPersongif());
        stmt.bindLong(11, entity.getCongwugif());
 
        Long personvalue_id = entity.getPersonvalue_id();
        if (personvalue_id != null) {
            stmt.bindLong(12, personvalue_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(1, person_id);
        }
 
        String person_name = entity.getPerson_name();
        if (person_name != null) {
            stmt.bindString(2, person_name);
        }
        stmt.bindLong(3, entity.getPerson_img());
        stmt.bindLong(4, entity.getCreatetime());
        stmt.bindLong(5, entity.getBig_ID());
 
        String mubiao = entity.getMubiao();
        if (mubiao != null) {
            stmt.bindString(6, mubiao);
        }
        stmt.bindLong(7, entity.getHardrank());
        stmt.bindLong(8, entity.getPerson_sex());
 
        String person_geyan = entity.getPerson_geyan();
        if (person_geyan != null) {
            stmt.bindString(9, person_geyan);
        }
        stmt.bindLong(10, entity.getPersongif());
        stmt.bindLong(11, entity.getCongwugif());
 
        Long personvalue_id = entity.getPersonvalue_id();
        if (personvalue_id != null) {
            stmt.bindLong(12, personvalue_id);
        }
    }

    @Override
    protected final void attachEntity(Person entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // person_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // person_name
            cursor.getInt(offset + 2), // person_img
            cursor.getInt(offset + 3), // createtime
            cursor.getInt(offset + 4), // Big_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mubiao
            cursor.getInt(offset + 6), // hardrank
            cursor.getInt(offset + 7), // person_sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // person_geyan
            cursor.getInt(offset + 9), // persongif
            cursor.getInt(offset + 10), // congwugif
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // personvalue_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setPerson_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPerson_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPerson_img(cursor.getInt(offset + 2));
        entity.setCreatetime(cursor.getInt(offset + 3));
        entity.setBig_ID(cursor.getInt(offset + 4));
        entity.setMubiao(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHardrank(cursor.getInt(offset + 6));
        entity.setPerson_sex(cursor.getInt(offset + 7));
        entity.setPerson_geyan(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPersongif(cursor.getInt(offset + 9));
        entity.setCongwugif(cursor.getInt(offset + 10));
        entity.setPersonvalue_id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setPerson_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getPerson_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        return entity.getPerson_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonValueDao().getAllColumns());
            builder.append(" FROM PERSON T");
            builder.append(" LEFT JOIN PERSON_VALUE T0 ON T.\"PERSONVALUE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Person loadCurrentDeep(Cursor cursor, boolean lock) {
        Person entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PersonValue personValue = loadCurrentOther(daoSession.getPersonValueDao(), cursor, offset);
        entity.setPersonValue(personValue);

        return entity;    
    }

    public Person loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Person> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Person> list = new ArrayList<Person>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Person> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Person> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
