package com.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ftd.txf.com.gamelife.entity.PersonValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_VALUE".
*/
public class PersonValueDao extends AbstractDao<PersonValue, Long> {

    public static final String TABLENAME = "PERSON_VALUE";

    /**
     * Properties of entity PersonValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Value_id = new Property(0, Long.class, "value_id", true, "_id");
        public final static Property Shuxing_de = new Property(1, int.class, "shuxing_de", false, "SHUXING_DE");
        public final static Property Shuxing_zhi = new Property(2, int.class, "shuxing_zhi", false, "SHUXING_ZHI");
        public final static Property Shuxing_ti = new Property(3, int.class, "shuxing_ti", false, "SHUXING_TI");
        public final static Property Shuxing_mei = new Property(4, int.class, "shuxing_mei", false, "SHUXING_MEI");
        public final static Property Shuxing_lao = new Property(5, int.class, "shuxing_lao", false, "SHUXING_LAO");
        public final static Property Person_rank = new Property(6, int.class, "person_rank", false, "PERSON_RANK");
        public final static Property All_exp = new Property(7, int.class, "all_exp", false, "ALL_EXP");
        public final static Property All_gold = new Property(8, int.class, "all_gold", false, "ALL_GOLD");
        public final static Property Allworld_paihan = new Property(9, int.class, "Allworld_paihan", false, "ALLWORLD_PAIHAN");
        public final static Property Friend_paihan = new Property(10, int.class, "friend_paihan", false, "FRIEND_PAIHAN");
        public final static Property Worktimes = new Property(11, int.class, "worktimes", false, "WORKTIMES");
        public final static Property Finally_value_pingfeng = new Property(12, int.class, "finally_value_pingfeng", false, "FINALLY_VALUE_PINGFENG");
        public final static Property Chenghao = new Property(13, String.class, "Chenghao", false, "CHENGHAO");
    }


    public PersonValueDao(DaoConfig config) {
        super(config);
    }
    
    public PersonValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_VALUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: value_id
                "\"SHUXING_DE\" INTEGER NOT NULL ," + // 1: shuxing_de
                "\"SHUXING_ZHI\" INTEGER NOT NULL ," + // 2: shuxing_zhi
                "\"SHUXING_TI\" INTEGER NOT NULL ," + // 3: shuxing_ti
                "\"SHUXING_MEI\" INTEGER NOT NULL ," + // 4: shuxing_mei
                "\"SHUXING_LAO\" INTEGER NOT NULL ," + // 5: shuxing_lao
                "\"PERSON_RANK\" INTEGER NOT NULL ," + // 6: person_rank
                "\"ALL_EXP\" INTEGER NOT NULL ," + // 7: all_exp
                "\"ALL_GOLD\" INTEGER NOT NULL ," + // 8: all_gold
                "\"ALLWORLD_PAIHAN\" INTEGER NOT NULL ," + // 9: Allworld_paihan
                "\"FRIEND_PAIHAN\" INTEGER NOT NULL ," + // 10: friend_paihan
                "\"WORKTIMES\" INTEGER NOT NULL ," + // 11: worktimes
                "\"FINALLY_VALUE_PINGFENG\" INTEGER NOT NULL ," + // 12: finally_value_pingfeng
                "\"CHENGHAO\" TEXT);"); // 13: Chenghao
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_VALUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonValue entity) {
        stmt.clearBindings();
 
        Long value_id = entity.getValue_id();
        if (value_id != null) {
            stmt.bindLong(1, value_id);
        }
        stmt.bindLong(2, entity.getShuxing_de());
        stmt.bindLong(3, entity.getShuxing_zhi());
        stmt.bindLong(4, entity.getShuxing_ti());
        stmt.bindLong(5, entity.getShuxing_mei());
        stmt.bindLong(6, entity.getShuxing_lao());
        stmt.bindLong(7, entity.getPerson_rank());
        stmt.bindLong(8, entity.getAll_exp());
        stmt.bindLong(9, entity.getAll_gold());
        stmt.bindLong(10, entity.getAllworld_paihan());
        stmt.bindLong(11, entity.getFriend_paihan());
        stmt.bindLong(12, entity.getWorktimes());
        stmt.bindLong(13, entity.getFinally_value_pingfeng());
 
        String Chenghao = entity.getChenghao();
        if (Chenghao != null) {
            stmt.bindString(14, Chenghao);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonValue entity) {
        stmt.clearBindings();
 
        Long value_id = entity.getValue_id();
        if (value_id != null) {
            stmt.bindLong(1, value_id);
        }
        stmt.bindLong(2, entity.getShuxing_de());
        stmt.bindLong(3, entity.getShuxing_zhi());
        stmt.bindLong(4, entity.getShuxing_ti());
        stmt.bindLong(5, entity.getShuxing_mei());
        stmt.bindLong(6, entity.getShuxing_lao());
        stmt.bindLong(7, entity.getPerson_rank());
        stmt.bindLong(8, entity.getAll_exp());
        stmt.bindLong(9, entity.getAll_gold());
        stmt.bindLong(10, entity.getAllworld_paihan());
        stmt.bindLong(11, entity.getFriend_paihan());
        stmt.bindLong(12, entity.getWorktimes());
        stmt.bindLong(13, entity.getFinally_value_pingfeng());
 
        String Chenghao = entity.getChenghao();
        if (Chenghao != null) {
            stmt.bindString(14, Chenghao);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PersonValue readEntity(Cursor cursor, int offset) {
        PersonValue entity = new PersonValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // value_id
            cursor.getInt(offset + 1), // shuxing_de
            cursor.getInt(offset + 2), // shuxing_zhi
            cursor.getInt(offset + 3), // shuxing_ti
            cursor.getInt(offset + 4), // shuxing_mei
            cursor.getInt(offset + 5), // shuxing_lao
            cursor.getInt(offset + 6), // person_rank
            cursor.getInt(offset + 7), // all_exp
            cursor.getInt(offset + 8), // all_gold
            cursor.getInt(offset + 9), // Allworld_paihan
            cursor.getInt(offset + 10), // friend_paihan
            cursor.getInt(offset + 11), // worktimes
            cursor.getInt(offset + 12), // finally_value_pingfeng
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // Chenghao
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonValue entity, int offset) {
        entity.setValue_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShuxing_de(cursor.getInt(offset + 1));
        entity.setShuxing_zhi(cursor.getInt(offset + 2));
        entity.setShuxing_ti(cursor.getInt(offset + 3));
        entity.setShuxing_mei(cursor.getInt(offset + 4));
        entity.setShuxing_lao(cursor.getInt(offset + 5));
        entity.setPerson_rank(cursor.getInt(offset + 6));
        entity.setAll_exp(cursor.getInt(offset + 7));
        entity.setAll_gold(cursor.getInt(offset + 8));
        entity.setAllworld_paihan(cursor.getInt(offset + 9));
        entity.setFriend_paihan(cursor.getInt(offset + 10));
        entity.setWorktimes(cursor.getInt(offset + 11));
        entity.setFinally_value_pingfeng(cursor.getInt(offset + 12));
        entity.setChenghao(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonValue entity, long rowId) {
        entity.setValue_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonValue entity) {
        if(entity != null) {
            return entity.getValue_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonValue entity) {
        return entity.getValue_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
